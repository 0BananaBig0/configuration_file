[
    {
        "key": "[ a",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly && neovim.mode != 'insert'"
    },
    {
        "key": "[ h",
        "command": "clangd.inlayHints.toggle",
        "when": "clangd.inlayHints.supported && editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "[ j",
        "command": "editor.action.marker.next",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "[ k",
        "command": "editor.action.marker.prev",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "] a",
        "command": "editor.debug.action.selectionToWatch",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "] ctrl+f2",
        "command": "workbench.action.debug.pause",
        "when": "editorFocus && debugState == 'running' && neovim.mode != 'insert'"
    },
    {
        "key": "] ctrl+f4",
        "command": "workbench.debug.viewlet.action.addFunctionBreakpointAction",
        "when": "((debuggersAvailable && disassemblyViewFocus) || (debuggersAvailable && editorTextFocus)) && neovim.mode != 'insert'"
    },
    {
        "key": "] e",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode && neovim.mode != 'insert'"
    },
    {
        "key": "] f2",
        "command": "editor.debug.action.runToCursor",
        "when": "editorFocus && inDebugMode && neovim.mode != 'insert'"
    },
    {
        "key": "] f4",
        "command": "editor.debug.action.conditionalBreakpoint",
        "when": "((debuggersAvailable && disassemblyViewFocus) || (debuggersAvailable && editorTextFocus)) && neovim.mode != 'insert'"
    },
    {
        "key": "] j",
        "command": "editor.debug.action.goToNextBreakpoint",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "] k",
        "command": "editor.debug.action.goToPreviousBreakpoint",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "] shift+f2",
        "command": "workbench.action.debug.stop",
        "when": "editorFocus && inDebugMode && !focusedSessionIsAttach && neovim.mode != 'insert'"
    },
    {
        "key": "] shift+f4",
        "command": "editor.debug.action.toggleInlineBreakpoint",
        "when": "((debuggersAvailable && disassemblyViewFocus) || (debuggersAvailable && editorTextFocus)) && neovim.mode != 'insert'"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+0",
        "command": "terminal.focus"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.debug.action.focusVariablesView"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.files.action.focusFilesExplorer"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.debug.action.focusWatchView"
    },
    {
        "key": "ctrl+5",
        "command": "workbench.debug.action.focusCallStackView"
    },
    {
        "key": "ctrl+6",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+7",
        "command": "extension.js-debug.revealPage"
    },
    {
        "key": "ctrl+7",
        "command": "workbench.action.problems.focus"
    },
    {
        "key": "ctrl+8",
        "command": "workbench.debug.action.focusRepl"
    },
    {
        "key": "ctrl+8",
        "command": "workbench.panel.output.focus"
    },
    {
        "key": "ctrl+9",
        "command": "workbench.panel.repl.view.focus"
    },
    {
        "key": "ctrl+alt+h",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+alt+l",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+escape",
        "command": "-workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+f6",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "ctrl+shift+f5",
        "command": "-workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "f2",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f3",
        "command": "editor.action.addCommentLine",
        "when": "editorTextFocus"
    },
    {
        "key": "f4",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "(debuggersAvailable && disassemblyViewFocus) || (debuggersAvailable && editorTextFocus)"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f6",
        "command": "-workbench.action.debug.pause",
        "when": "debugState == 'running' && neovim.mode != 'insert'"
    },
    {
        "key": "f6",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f7",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && !editorHasSelection"
    },
    {
        "key": "f7",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentFormattingProvider && editorHasSelection"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "-editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f2",
        "command": "workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "shift+f4",
        "command": "workbench.debug.viewlet.action.removeAllBreakpoints"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach && neovim.mode != 'insert'"
    },
    {
        "key": "shift+f6",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f8",
        "command": "-editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+f9",
        "command": "-editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "shift-f3",
        "command": "editor.action.removeCommentLine",
        "when": "editorTextFocus"
    },
    {
        "key": "space c",
        "command": "editor.action.revealDeclaration",
        "when": "editorFocus && editorHasDeclarationProvider && !isInEmbeddedEditor && neovim.mode != 'insert'"
    },
    {
        "key": "space d",
        "command": "editor.action.revealDefinition",
        "when": "editorFocus && editorHasDefinitionProvider && neovim.mode != 'insert'"
    },
    {
        "key": "space e",
        "command": "editor.action.peekDefinition",
        "when": "editorFocus && editorHasDefinitionProvider && !inReferenceSearchEditor && !isInEmbeddedEditor && neovim.mode != 'insert'"
    },
    {
        "key": "space f",
        "command": "editor.action.refactor",
        "when": "editorFocus && editorHasCodeActionsProvider && textInputFocus && !editorReadonly && neovim.mode != 'insert'"
    },
    {
        "key": "space i",
        "command": "editor.action.goToImplementation",
        "when": "editorFocus && editorHasImplementationProvider && neovim.mode != 'insert'"
    },
    {
        "key": "space j",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "space k",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "space n",
        "command": "editor.action.rename",
        "when": "editorFocus && editorHasRenameProvider && editorTextFocus && !editorReadonly && neovim.mode != 'insert'"
    },
    {
        "key": "space p",
        "command": "cdecl.explainSelected",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "space q",
        "command": "workbench.action.closeActiveEditor",
        "when": "editorFocus && neovim.mode != 'insert'"
    },
    {
        "key": "space r",
        "command": "editor.action.goToReferences",
        "when": "editorFocus && editorHasReferenceProvider && !inReferenceSearchEditor && !isInEmbeddedEditor && neovim.mode != 'insert'"
    },
    {
        "key": "space t",
        "command": "editor.action.goToTypeDefinition",
        "when": "editorFocus && editorHasTypeDefinitionProvider && neovim.mode != 'insert'"
    },
    {
        "key": "space w",
        "command": "workbench.action.files.save",
        "when": "editorFocus && neovim.mode != 'insert'"
    }
]